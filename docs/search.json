[
  {
    "objectID": "SRI.html",
    "href": "SRI.html",
    "title": "SRI",
    "section": "",
    "text": "# Load required libraries\nlibrary(quantmod)\n\nLoading required package: xts\n\n\nLoading required package: zoo\n\n\n\nAttaching package: 'zoo'\n\n\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric\n\n\nLoading required package: TTR\n\n\nRegistered S3 method overwritten by 'quantmod':\n  method            from\n  as.zoo.data.frame zoo \n\nlibrary(TTR)\nlibrary(dplyr)\n\n\n######################### Warning from 'xts' package ##########################\n#                                                                             #\n# The dplyr lag() function breaks how base R's lag() function is supposed to  #\n# work, which breaks lag(my_xts). Calls to lag(my_xts) that you type or       #\n# source() into this session won't work correctly.                            #\n#                                                                             #\n# Use stats::lag() to make sure you're not using dplyr::lag(), or you can add #\n# conflictRules('dplyr', exclude = 'lag') to your .Rprofile to stop           #\n# dplyr from breaking base R's lag() function.                                #\n#                                                                             #\n# Code in packages is not affected. It's protected by R's namespace mechanism #\n# Set `options(xts.warn_dplyr_breaks_lag = FALSE)` to suppress this warning.  #\n#                                                                             #\n###############################################################################\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:xts':\n\n    first, last\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ readr     2.1.5\n✔ ggplot2   3.5.1     ✔ stringr   1.5.1\n✔ lubridate 1.9.4     ✔ tibble    3.2.1\n✔ purrr     1.0.2     ✔ tidyr     1.3.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::first()  masks xts::first()\n✖ dplyr::lag()    masks stats::lag()\n✖ dplyr::last()   masks xts::last()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggplot2)\nlibrary(readr)\n\n\n# Define a list of popular stock tickers (S&P 500 example)\nstock_symbols &lt;- c(\"AAPL\", \"MSFT\", \"TSLA\", \"NVDA\", \"AMZN\", \"GOOGL\", \"META\", \"NFLX\", \"AMD\", \"BABA\")\n\n# Function to get RSI for a stock\nget_stock_rsi &lt;- function(symbol, n = 14) {\n  tryCatch({\n    stock_data &lt;- getSymbols(symbol, src = \"yahoo\", from = Sys.Date() - 90, auto.assign = FALSE)\n    rsi_values &lt;- RSI(Cl(stock_data), n = n)\n    last_rsi &lt;- tail(rsi_values, 1) %&gt;% as.numeric()\n    return(last_rsi)\n  }, error = function(e) NA)\n}\n\n# Get RSI for all stocks\nrsi_data &lt;- data.frame(\n  Symbol = stock_symbols,\n  RSI = sapply(stock_symbols, get_stock_rsi)\n)\n\n# Remove stocks with missing data\nrsi_data &lt;- na.omit(rsi_data)\n\n# Sort by RSI (descending)\nrsi_data &lt;- rsi_data %&gt;% arrange(desc(RSI))\n\n# Display Top RSI Stocks\nrsi_data\n\n      Symbol      RSI\nBABA    BABA 77.14358\nAAPL    AAPL 71.07510\nGOOGL  GOOGL 64.24170\nNVDA    NVDA 63.24305\nTSLA    TSLA 59.76163\nMSFT    MSFT 56.34352\nAMD      AMD 54.42990\nAMZN    AMZN 41.46621\nMETA    META 33.99451\nNFLX    NFLX 33.88385\n\n\n\n# Select top 5 stocks with highest RSI\ntop_rsi_stocks &lt;- head(rsi_data, 5)\n\n# Plot RSI values for top stocks\nggplot(top_rsi_stocks, aes(x = reorder(Symbol, RSI), y = RSI, fill = Symbol)) +\n  geom_bar(stat = \"identity\", color = \"black\") +\n  coord_flip() +\n  labs(title = \"Top 5 Stocks with Highest RSI\", x = \"Stock Symbol\", y = \"RSI Value\") +\n  theme_minimal()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Gerver H. Lopez",
    "section": "",
    "text": "Hello! I’m Gerver, an interdisciplinary individual exploring the intersections of economics, environment, business and data.\n\n\n\n\nMy background blends experiences in manual labor, small businesses development and creation, environmental economics, political economy, and creative technology. I use tools like R, Quarto, and Github Pages to tell stories that make research more transparent and engaging.\n\n\n\n\nIt is my hope, that my posts would encourage other students, regardless of academic background, to explore data-driven storytelling.\n\n\n\n\nI’m endlessly curious about how economics systems, social networks, policy, and ecological resiliance shape our world. I am particularly interested in why and how people spend money on environmental causes, what motivates that behavior, and how these decisions related to the value of natural resources and money in macrofinance.\n\n\n\n\n\n\n\nCloseread enables scrollytelling.\n\n\n\n\n\n\n\nDraw your reading attention with:"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Gerver",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "basictimeseries.html",
    "href": "basictimeseries.html",
    "title": "basictimeseries",
    "section": "",
    "text": "r = getOption(\"repos\")\nr[\"CRAN\"] = \"http://cran.us.r-project.org\"\noptions(repos = r)\ninstall.packages(c(\"quantmod\", \"forecast\", \"tseries\"))\n\n\nThe downloaded binary packages are in\n    /var/folders/fl/s6m8sr9s5g7f_dwzj5v86ppw0000gn/T//Rtmp9HXztC/downloaded_packages\n\nlibrary(quantmod)\n\nLoading required package: xts\n\n\nLoading required package: zoo\n\n\n\nAttaching package: 'zoo'\n\n\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric\n\n\nLoading required package: TTR\n\n\nRegistered S3 method overwritten by 'quantmod':\n  method            from\n  as.zoo.data.frame zoo \n\nlibrary(forecast)\nlibrary(tseries)\n\n\n# Getting Apple stock information (AAPL) for the last 5 years.\n\ngetSymbols(\"AAPL\", src = \"yahoo\", from = \"2019-01-01\", to = Sys.Date())\n\n[1] \"AAPL\"\n\n# View the first few rows\nhead(AAPL)\n\n           AAPL.Open AAPL.High AAPL.Low AAPL.Close AAPL.Volume AAPL.Adjusted\n2019-01-02   38.7225   39.7125  38.5575    39.4800   148158800      37.57521\n2019-01-03   35.9950   36.4300  35.5000    35.5475   365248800      33.83244\n2019-01-04   36.1325   37.1375  35.9500    37.0650   234428400      35.27673\n2019-01-07   37.1750   37.2075  36.4750    36.9825   219111200      35.19820\n2019-01-08   37.3900   37.9550  37.1300    37.6875   164101200      35.86919\n2019-01-09   37.8225   38.6325  37.4075    38.3275   180396400      36.47831\n\n\n\n# Converting data into a basic time series object and creating a visualization of the closing prices\n\n# End of Day (EoD) prices\nAAPL_Close &lt;- Cl(AAPL)\n\n# Basic time series - 252 active trading days in a year\nAAPL_ts &lt;- ts(AAPL_Close, frequency = 252)\n\n# Creating a visual plot\nplot(AAPL_ts, main=\"AAPL Adjusted Closing Prices\", ylab=\"Price\", col=\"blue\")"
  }
]